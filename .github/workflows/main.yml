name: Daily Website Crawl （Main）

on:
  workflow_dispatch:
  schedule:
    - cron: '5 0 * * *'

jobs:
  crawl-and-notify:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true

    - name: Setup timezone
      run: sudo timedatectl set-timezone Asia/Shanghai

    - name: Create daily directory
      run: |
        DIR_NAME="webpages-$(TZ='Asia/Shanghai' date +'%Y%m%d')"
        echo "DIR_NAME=$DIR_NAME" >> $GITHUB_ENV
        mkdir -p $DIR_NAME
        echo "目录已创建：$DIR_NAME"

    - name: Force craw website
      run: |
        # 强制下载所有内容（即使未修改）
        wget --mirror \
             --convert-links \
             --adjust-extension \
             --page-requisites \
             --no-parent \
             --no-check-certificate \
             --user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36" \
             --retry-on-http-error=403,429,500-599 \
             --tries=5 \
             --wait=2 \
             --random-wait \
             --span-hosts \
             --domains saoing.com \
             --no-iri \
             --restrict-file-names=windows \
             -e robots=off \
             --no-if-modified-since \  # 新增关键参数
             --timestamping \  # 保留时间戳功能但禁用304检查
             -P $DIR_NAME \
             http://www.saoing.com/ 2>&1 | tee wget.log

        # 强制生成标记文件（兼容htm/html）
        touch $DIR_NAME/www.saoing.com/.crawl_success || true
        echo "目录内容验证："
        ls -l $DIR_NAME/www.saoing.com/index.*  # 显示实际文件名

    - name: Validate content
      run: |
        echo "目录结构验证："
        # 兼容htm和html两种扩展名
        if [ -f "$DIR_NAME/www.saoing.com/index.htm" ] || [ -f "$DIR_NAME/www.saoing.com/index.html" ]; then
          echo "检测到有效内容"
          echo "CONTENT_VALID=1" >> $GITHUB_ENV
          # 统一文件命名
          [ -f "$DIR_NAME/www.saoing.com/index.htm" ] && \
          mv $DIR_NAME/www.saoing.com/index.htm $DIR_NAME/www.saoing.com/index.html
        else
          echo "未找到核心文件"
          echo "CONTENT_VALID=0" >> $GITHUB_ENV
        fi

    - name: Commit changes
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

        git add $DIR_NAME
        if git commit -m "Add crawl: $DIR_NAME [$(date +'%m%d-%H%M')]"; then
          git push
          echo "COMMIT_STATUS=success" >> $GITHUB_ENV
        else
          echo "COMMIT_STATUS=no_changes" >> $GITHUB_ENV
        fi

    - name: Send Telegram notification
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        # 智能状态判断
        if [ "$CONTENT_VALID" -eq 1 ]; then
          STATUS="✅ 内容抓取成功"
          FILE_INFO="首页文件存在（$(ls $DIR_NAME/www.saoing.com/index.*)）"
        else
          STATUS="⚠️ 关键文件缺失"
          FILE_INFO="未找到 index.htm/html"
        fi

        MESSAGE="<b>网站抓取报告</b>%0A"
        MESSAGE+="- 状态: ${STATUS}%0A"
        MESSAGE+="- 日期: $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M')%0A"
        MESSAGE+="- 目录: <code>${DIR_NAME}</code>%0A"
        MESSAGE+="- 存储: ${FILE_INFO}%0A"
        MESSAGE+="- 提交状态: ${COMMIT_STATUS}%0A"
        MESSAGE+="<a href='https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID'>📜 查看完整日志</a>"

        curl -s -X POST \
          "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
          -d chat_id="${TELEGRAM_CHAT_ID}" \
          -d text="${MESSAGE}" \
          -d parse_mode="HTML" \
          -d disable_web_page_preview="true"
