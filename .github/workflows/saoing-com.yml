name: Daily Website Crawl

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  crawl-and-notify:
    runs-on: ubuntu-latest

    # 添加权限声明
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        # 显式配置令牌权限
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
        
    - name: Set up directory
      run: |
        DIR_NAME="webpages-$(date +'%Y%m%d')"
        echo "DIR_NAME=$DIR_NAME" >> $GITHUB_ENV
        mkdir -p $DIR_NAME

    - name: Crawl website (with debug)
      run: |
        # 添加调试参数和错误处理
        wget --debug \
             --mirror \
             --convert-links \
             --adjust-extension \
             --page-requisites \
             --domains saoing.com,dtmb.saoing.com \  # 允许抓取的域名列表
             --no-parent \
             --tries=3 \
             --timeout=30 \
             --waitretry=5 \
             --retry-connrefused \
             --user-agent="Mozilla/5.0 (compatible; GitHub-Actions-Crawler)" \
             --no-check-certificate \
             --span-hosts \  # 允许跨域名抓取
             -P $DIR_NAME \
             http://www.saoing.com/ 2>&1 | tee wget.log || echo "Wget exited with code $? (non-fatal)" \
             http://dtmb.saoing.com/  # 显式指定子域名入口
             
        # 强制创建空目录（即使下载失败）
        touch $DIR_NAME/.gitkeep

        # 修复子域名目录权限
        chmod -R 755 $DIR_NAME
        

    - name: Check directory content
      run: |
        # 检查目录是否生成内容
        echo "Directory contents:"
        ls -lR $DIR_NAME || true

    - name: Commit changes
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"

        # 强制设置远程仓库地址（关键修复）
        git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        
        # 强制提交（允许空提交）
        git add $DIR_NAME
        git commit --allow-empty -m "Add crawl attempt: $DIR_NAME"
        git push


    - name: Send Telegram notification
      if: always()  # 无论成功失败都执行
      env:
        TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
        TG_CHAT_ID: ${{ secrets.TG_CHAT_ID }}
      run: |
        # 获取工作流状态
        if [ "${{ job.status }}" == "success" ]; then
          STATUS="✅ 成功"
          FILE_INFO=$(du -sh $DIR_NAME 2>/dev/null || echo "无有效内容")
        else
          STATUS="⚠️ 失败"
          FILE_INFO="错误代码: ${{ job.status }}"
        fi

        # 构建消息内容
        MESSAGE="[网站抓取状态]%0A${STATUS}%0A"
        MESSAGE+="- 日期: $(date +'%Y-%m-%d')%0A"
        MESSAGE+="- 目录: ${DIR_NAME}%0A"
        MESSAGE+="- 存储: ${FILE_INFO}%0A"
        MESSAGE+="- 日志: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"

        # 调试输出
        echo "Sending Telegram message:"
        echo "${MESSAGE}"

        # 发送请求（带重试）
        curl --retry 3 \
          -X POST \
          "https://api.telegram.org/bot${TG_BOT_TOKEN}/sendMessage" \
          -d chat_id="${TG_CHAT_ID}" \
          -d text="${MESSAGE}" \
          -d parse_mode="HTML" \
          -o curl_output.txt

        # 检查响应
        echo "Curl response:"
        cat curl_output.txt
